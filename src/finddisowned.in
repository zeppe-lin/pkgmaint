#!/bin/sh
# finddisowned - find files that are disowned by package manager
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Section: Error codes                                               #
# Define error codes for script exit statuses.                       #
######################################################################

# https://tldp.org/LDP/abs/html/exitcodes.html
readonly E_GENERAL=1     # General error
readonly E_CMDEXEC=126   # Command invoked cannot execute
readonly E_INTERRUPT=130 # Script interrupted or terminated by C-c

######################################################################
# Section: Notification helpers                                      #
# Functions for displaying messages to the user.                     #
######################################################################

# info - Print an informational message to stdout.
# Args:
#   $1: The message string to print.
info() {
	echo "=======> $1"
}

# error - Print an error message to stderr.
# Args:
#   $1: The message string to print.
error() {
	info "ERROR: $1" 1>&2
}

######################################################################
# Section: Exit hooks                                                #
# Functions to handle script termination (interrupts, exit).         #
######################################################################

# Don't warn about unreachable commands in these functions, see trap(1p).

# interrupted - Handle script interruption signals (HUP, INT, QUIT, TERM).
# shellcheck disable=2317
interrupted() {
	echo ""             1>&2
	info "Interrupted." 1>&2

	# Explicitly call atexit() to ensure cleanup routines are
	# executed on interrupt
	atexit

	exit $E_INTERRUPT
}

# atexit - Cleanup function executed upon script exit.
# shellcheck disable=2317
atexit() {
	if [ -f "$TMPFILE1" ]; then  rm -f "$TMPFILE1";  fi
	if [ -f "$TMPFILE2" ]; then  rm -f "$TMPFILE2";  fi
}

######################################################################
# Section: Finddisowned functionality                                #
# Core function to identify disowned files.                          #
######################################################################

# finddisowned - Find files that are not owned by the package manager.
finddisowned() {
	# Create temp file 1 to store package database file list
	TMPFILE1=$(mktemp) || exit $E_CMDEXEC

	# Create temp file 2 to store found file list
	TMPFILE2=$(mktemp) || exit $E_CMDEXEC

	info "Get all known files from package database"
	sort -u "$ROOT/var/lib/pkg/db" > "$TMPFILE1"

	info "Get search paths from configuration file"
	#_paths=$(xargs < "$(readlink -f "$CONF")")
	while read -r _path; do
		# Skip comments and empty lines
		case $_path in \#* | "" ) continue ;; esac

		_paths="$_paths $_path"
	done < "$(readlink -f "$CONF")"

	info "Search files that are disowned by package manager"
	(
		cd "${ROOT:-/}" || exit $E_CMDEXEC

		# Intentional word splitting for _paths.
		# shellcheck disable=2086
		find $_paths \( -type d -printf '%p/\n' -o -print \) |
			sort > "$TMPFILE2"
	)

	# Compare TMPFILE2 (all found files) and TMPFILE1 (package
	# database files):
	# -2: suppress lines unique to file2 (package database files)
	# -3: suppress lines common to both files
	# Output: Lines unique to file1 (TMPFILE2), which are the
	# disowned files.
	comm -23 "$TMPFILE2" "$TMPFILE1"
}

######################################################################
# Section: Command-line helpers                                      #
# Functions for handling command-line arguments and options.         #
######################################################################

# print_help - Print the help message to stdout.
print_help() {
	cat <<EOF
Usage: $ARGV0 [-hv] [-c conffile] [-r rootdir]
Find files that are disowned by package manager.

Mandatory arguments to long options are mandatory for short options too.
  -c, --config=conffile  specify an alternate configuration file
  -r, --root=rootdir     specify an alternate root directory
  -v, --version          print version and exit
  -h, --help             print help and exit
EOF
}

# print_version - Print the script version to stdout.
print_version() {
	echo "$ARGV0 (pkgmaint) @VERSION@" # Placeholder for version string
}

# parse_options - Parse command-line options using getopt(1).
# Globals modified:
#   CONF
#   ROOT
parse_options() {
	if ! _opts=$(getopt -a -n "$ARGV0" -l "$LOPTS" -o "$SOPTS" -- "$@"); then
		echo "Try '$ARGV0 --help' for more information." 1>&2
		exit $E_GENERAL
	fi

	eval set -- "$_opts"; unset _opts
	while true; do
		case $1 in
		-c| --config) CONF=$2        ; shift  ;;
		-r|   --root) ROOT=$2        ; shift  ;;
		-v|--version) print_version  ; exit 0 ;;
		-h|   --help) print_help     ; exit 0 ;;
		          --) shift          ; break  ;;
		esac
		shift
	done
	ROOT=${ROOT:-""}
	CONF=${CONF:-"$ROOT/etc/finddisowned.conf"}
}

######################################################################
# Section: Main execution logic                                      #
# Main function and script initialization.                           #
######################################################################

# main - Main function of the script.
# Args:
#   $@: Command-line arguments passed to the script.
main() {
	parse_options "$@"

	# Check if the specified root directory exists, if provided
	if [ -n "$ROOT" ] && [ ! -d "$ROOT" ]; then
		echo "$ARGV0: root directory '$ROOT' not found" 1>&2
		exit $E_GENERAL
	fi

	# Check if configuration file exists
	if [ ! -f "$CONF" ]; then
		echo "$ARGV0: configuration file '$FILE' not found" 1>&2
		exit $E_GENERAL
	fi

	finddisowned
}

######################################################################
# Section: Script initialization                                     #
# Set traps, global variables, and call main function.               #
######################################################################

# -e: Exit if command return status greater than 0.
# -f: Disable globbing *?[].
set -ef

# Set exit hooks.
trap "interrupted" HUP  INT  QUIT  TERM
trap "atexit"      EXIT

# Globals.
export LC_ALL=POSIX
readonly ARGV0="${0##*/}"
readonly LOPTS="config:,root:,version,help"
readonly SOPTS="c:r:vh"
TMPFILE1=
TMPFILE2=

# Execute the main function, passing command-line arguments.
main "$@"

# vim: cc=72 tw=70
# End of file.
