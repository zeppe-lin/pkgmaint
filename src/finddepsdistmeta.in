#!/usr/bin/env perl
# finddepsdistmeta - find perl-module's dependencies
# See COPYING and COPYRIGHT files for corresponding information.

# XXX FIXME: The finddepsdistmeta subroutines are ugly as f*ck.

# flush stdout
$|++;

use strict;
use warnings;
#use diagnostics;
use version;
use Data::Dumper;
use File::Basename;
use Module::CoreList;
use Getopt::Long qw(:config gnu_compat);
use Term::ANSIColor qw(:constants);

my $PROGRAM = basename $0;
my $VERSION = '@VERSION@';

#use JSON; # TODO: parse JSON files.
use YAML::XS 'LoadFile';

# Search for dependencies in the following YAML blocks.
my @BLOCKS = qw(build_requires configure_requires requires);

######################################################################
# finddepsdistmeta subroutines.                                      #
######################################################################

# Search for dependency in footprint files.
sub found_in_packages {
	my $dep = shift;
	my $found = '';
	my %incs = map { $_, 1 } @INC; # sort paths by unique

	for my $inc (keys %incs) {
		my $path = $inc . '/' . join('/', split('::', $dep));

		my @pathsearch = qx(
			pkgman fsearch --full '$path.*' 2>/dev/null
		);
		$found .= "@pathsearch";
	}
	return $found;
}

sub process_dependency {
	my ($dep, $ver) = @_;

	# check if dependency is in Perl's core or outside
	return print(BRIGHT_GREEN, "$dep: $ver (core)\n", RESET)
		if Module::CoreList::is_core($dep, $ver);

	# check if dependency is perl itself and requires minimum
	# version
	if ($dep eq 'perl') {
		my $perl_version = version->parse($]);
		my $dep_version  = version->parse($ver);

		print $dep_version <= $perl_version
			? ("$dep: $ver (ok)\n")
			: (RED, "$dep: $ver (missing)\n", RESET);

		return;
	}

	# search for dependency in the packages' database
	print BRIGHT_YELLOW, "$dep: $ver (not in core, searching in packages...)\n", RESET;
	my $found = found_in_packages($dep);
	if (!$found) {
		print "  ", BOLD, RED, "MISSING!\n", RESET;
	} else {
		print $found;
	}
}

sub finddeps_distmeta {
	my $meta = LoadFile(shift || 'META.yml');

	for my $require (@BLOCKS) {
		next unless exists $meta->{ $require };

		print BOLD, UNDERLINE, "Check $require...", RESET, "\n";

		for my $dep (sort keys %{ $meta->{ $require } }) {
			my $ver = $meta->{ $require }->{ $dep };
			process_dependency($dep, $ver);
		}
		print "\n";
	}
}

######################################################################
# Command-line helpers.                                              #
######################################################################

sub print_help {
	print <<EOF;
Usage: $PROGRAM [-hv] [file]
Parse perl-module's distmeta file and show dependencies.

  -v, --version   print version and exit
  -h, --help      print help and exit
EOF
}

sub print_version {
	print "$PROGRAM (pkgmaint) $VERSION\n";
}

sub main {
	my $help_ref = "Try '$PROGRAM --help' for more information.";

	GetOptions(
		"v|version" => \my $opt_version,
		"h|help"    => \my $opt_help,
	) or die "$help_ref\n";

	print_version() and exit if $opt_version;
	print_help()    and exit if $opt_help;

	die "$PROGRAM: too many arguments\n$help_ref\n"
		if scalar(@ARGV) > 1;

	finddeps_distmeta(shift @ARGV);
}

######################################################################

main() if not caller();
1;

# vim: cc=72 tw=70
# End of file.
