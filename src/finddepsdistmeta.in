#!/usr/bin/env perl
# finddepsdistmeta - find perl-module's dependencies
# See COPYING and COPYRIGHT files for corresponding information.

use strict;
use warnings;
use version;
use File::Basename;
use Module::CoreList;
use Getopt::Long qw(:config gnu_compat);
use Term::ANSIColor qw(:constants);
use YAML::XS qw(LoadFile);
# XXX use JSON; TODO: parse JSON files too.

$|++; # Flush stdout immediately.

my $PROGRAM = basename $0;
my $VERSION = '@VERSION@';

# Search for dependencies in the following YAML blocks:
my @DEPENDENCY_BLOCKS = qw(build_requires configure_requires requires);

######################################################################
# finddepsdistmeta subroutines.                                      #
######################################################################

# Searches for a Perl module in available packages.
sub find_module_in_packages {
    my $module_name = shift;
    my $package_list = '';
    my %include_paths = map { $_, 1 } @INC; # Ensure unique paths.

    for my $include_path (keys %include_paths) {
        my $module_path = $include_path . '/' . join('/', split('::', $module_name));
        my @found_packages = qx(pkgman fsearch --full '$module_path.*' 2>/dev/null);
        $package_list .= "@found_packages";
    }
    return $package_list;
}

# Processes a single dependency, checking core, perl version, and
# packages.
sub process_dependency {
    my ($module_name, $required_version) = @_;

    # Check if the module is part of Perl's core.
    return print(BRIGHT_GREEN, "$module_name: $required_version (core)\n", RESET)
        if Module::CoreList::is_core($module_name, $required_version);

    # Check if the dependency is Perl itself and compare versions.
    if ($module_name eq 'perl') {
        my $current_perl_version = version->parse($]);
        my $required_perl_version = version->parse($required_version);
        print $required_perl_version <= $current_perl_version
            ? "$module_name: $required_version (ok)\n"
            : (RED, "$module_name: $required_version (missing)\n", RESET);
        return;
    }

    # Search for the module in available packages.
    print BRIGHT_YELLOW, "$module_name: $required_version (not in core, searching in packages...)\n", RESET;
    my $found_packages = find_module_in_packages($module_name);
    print $found_packages
        ? $found_packages
        : ("  ", BOLD, RED, "MISSING!\n", RESET);
}

# Finds and processes dependencies from a distribution metadata file.
sub find_dependencies_from_metadata {
    my $metadata_file = shift || 'META.yml';
    my $metadata = LoadFile($metadata_file);

    for my $block_name (@DEPENDENCY_BLOCKS) {
        next unless exists $metadata->{$block_name};
        print BOLD, UNDERLINE, "Check $block_name...", RESET, "\n";

        for my $module_name (sort keys %{ $metadata->{$block_name} }) {
            my $required_version = $metadata->{$block_name}{$module_name};
            process_dependency($module_name, $required_version);
        }
        print "\n";
    }
}

######################################################################
# Command-line helpers.                                              #
######################################################################

sub print_help {
    print <<EOF;
Usage: $PROGRAM [-hv] [file]
Parse perl-module's distmeta file and show dependencies.

  -v, --version   print version and exit
  -h, --help      print help and exit
EOF
}

sub print_version {
    print "$PROGRAM (pkgmaint) $VERSION\n";
}

sub main {
    my $usage_message = "Try '$PROGRAM --help' for more information.";

    GetOptions(
        "v|version" => \my $opt_version,
        "h|help"    => \my $opt_help,
    ) or die "$usage_message\n";

    print_version() and exit if $opt_version;
    print_help()    and exit if $opt_help;

    die "$PROGRAM: too many arguments\n$usage_message\n" if @ARGV > 1;

    find_dependencies_from_metadata(@ARGV);
}

######################################################################

main() unless caller();

1;

# vim: sw=4 ts=4 sts=4 et cc=72 tw=70
# End of file.
