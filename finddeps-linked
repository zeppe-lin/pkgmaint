#!/bin/sh
# finddeps-linked - find linked dependencies for a package
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Notification helpers.                                              #
######################################################################

# Print error message to stderr and terminate the program.
#   arg $1: the message (optional)
#   arg $2: print help reference (y/n) (optional)
#   arg $3: exit code instead of default "1" (optional)
fatal() {
	if [ -n "$1" ]; then
		echo "$ARGV0: $1" 1>&2
	fi

	if [ -n "$2" ] && [ "$2" = y ]; then
		echo "Try '$ARGV0 --help' for more information." 1>&2
	fi

	echo "${3:-1}"
}

######################################################################
# Exit hooks.                                                        #
######################################################################

# Don't warn about unreachable commands in these functions, see
# trap(1p).

# shellcheck disable=2317
interrupted() {
	echo ""                      1>&2
	echo "=======> Interrupted." 1>&2
	exit 1
}

# shellcheck disable=2317
atexit() {
	if [ -f "$TMPFILE1" ]; then  rm -f "$TMPFILE1";  fi
	if [ -f "$TMPFILE2" ]; then  rm -f "$TMPFILE2";  fi
}

######################################################################
# Finddeps.                                                          #
######################################################################

finddeps() {
	# https://tldp.org/LDP/abs/html/exitcodes.html
	# 126 - Command invoked cannot execute.
	TMPFILE1=$(mktemp) || exit 126
	TMPFILE2=$(mktemp) || exit 126

	# linked dependencies
	pkginfo -l "$1" | sed 's/^/\//g' |
		xargs -r -L10 -P "${JOBS:-1}"                      \
		file --no-buffer --separator '>'                   \
			-e apptype -e ascii -e encoding -e tokens  \
			-e cdf -e compress -e tar -e text          |
		awk '
			BEGIN { FS = ">[ ]+" }
			$0 ~ /ELF.*executable.*/    { print $1 }
			$0 ~ /ELF.*shared object.*/ { print $1 }'  |
		xargs -r -L10 -P "${JOBS:-1}" ldd 2>/dev/null      |
		awk '!/(linux-gate)|( dynamic)|(not found)/{
			printf "%s\n", $3
		}' >> "$TMPFILE1"

	# resolve symbolic links and save only unique ones
	xargs -a "$TMPFILE1" -I{} -r -P "${JOBS:-1}" readlink -f "{}" |
		sort | uniq > "$TMPFILE2"

	# search for owner
	xargs -a "$TMPFILE2" -I{} -r -P "${JOBS:-1}" pkginfo -o "{}"  |
		awk '!/^(Package|pkginfo: no owner)/{print $1}'       |
		sort | uniq

	# additional deps that can't be found by ldd(8)
	pkginfo -l "$1" | while read -r line; do
		case $line in
		   usr/share/gir-1.0/*.gir) echo "gobject-introspection" ;;
		usr/share/vala/vapi/*.vapi) echo "vala"                  ;;
		esac
	done | sort -u
}

######################################################################
# Command-line helpers.                                              #
######################################################################

print_help() {
	cat <<EOF
Usage: $ARGV0 pkgname
       $ARGV0 [-v]
       $ARGV0 [-h]
Find linked dependencies for a package.

  -v, --version  print version and exit
  -h, --help     print help and exit
EOF
}

print_version() {
	echo "$ARGV0 (pkgmaint) @VERSION@"
}

parse_options() {
	_opts=$(getopt -a -n "$ARGV0" -l "$LOPTS" -o "$SOPTS" -- "$@") || fatal '' y
	eval set -- "$_opts"; unset _opts
	while true; do
		case $1 in
		-v|--version) print_version ; exit 0 ;;
		-h|   --help) print_help    ; exit 0 ;;
		          --) shift         ; break  ;;
		esac
		shift
	done

	PKGNAME=$*

	# Intentional word splitting.
	# shellcheck disable=SC2086
	set -- $PKGNAME

	case $# in
	1) ;; # Fine, one argument is required.
	0) fatal "missing argument" y ;;
	*) fatal "too many arguments" y ;;
	esac

	if ! pkgman isinst "$PKGNAME" >/dev/null 2>&1; then
		fatal "$PKGNAME is not installed" n
	fi
}

main() {
	parse_options "$@"

	finddeps "$PKGNAME"
}

######################################################################

# -e: Exit if command return status greater than 0
# -f: Disable globbing *?[]
set -ef

# Set exit hooks.
trap "interrupted" HUP INT QUIT TERM
trap "atexit"      EXIT

# Globals.
export LC_ALL=POSIX
export LD_LIBRARY_PATH="/lib:/usr/lib:/lib32:/usr/lib32:$LD_LIBRARY_PATH"

readonly ARGV0="${0##*/}"
readonly LOPTS="version,help"
readonly SOPTS="vh"

# Adjust to suckless core.
if command -v nproc >/dev/null 2>&1; then
  # GNU coreutils
  JOBS=$(nproc)
elif getconf _NPROCESSORS_ONLN >/dev/null 2>&1; then
  # suckless sbase
  JOBS=$(getconf _NPROCESSORS_ONLN)
else
  # linuxism
  JOBS=$(grep -c processor /proc/cpuinfo)
fi

TMPFILE1=
TMPFILE2=

######################################################################

main "$@"

# vim: cc=72 tw=70
# End of file.
