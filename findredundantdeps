#!/bin/sh
# findredundantdeps - find (un)necessary dependencies of the package
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Notification helpers.                                              #
######################################################################

# Print error message to stderr and terminate the program.
#   arg $1: the message (optional)
#   arg $2: print help reference (y/n) (optional)
#   arg $3: exit code instead of default 1 (optional)
fatal() {
	if [ -n "$1" ]; then
		echo "$ARGV0: $1" 1>&2
	fi

	if [ -n "$2" ] && [ "$2" = y ]; then
		echo "Try '$ARGV0 --help' for more information." 1>&2
	fi

	exit "${3:-1}"
}

######################################################################
# Findredundantdeps.                                                 #
######################################################################

# Print package dependencies recursively.
#   arg $1: package name
findredundantdeps() {
	_deps=$(pkgman dep --all "$1")

	if [ -n "$_deps" ]; then
		# Intentional.
		# shellcheck disable=2086
		pkgman dep --all --recursive --full "$1" |
			grep -E "($(echo $_deps | tr ' ' '|'))$"
	fi
}

# Print only unique lines of the list.
show_uniq() {
	tr ' ' '\n' | sort | uniq -u
}

######################################################################
# Command-line helpers.                                              #
######################################################################

print_help() {
	cat <<EOF
Usage: $ARGV0 [-u] pkgname
       $ARGV0 [-v]
       $ARGV0 [-h]
Find (un)necessary dependencies of the package.

  -u, --unique   print only unique (required) dependencies
  -v, --version  print version and exit
  -h, --help     print help and exit
EOF
}

print_version() {
	echo "$ARGV0 (pkgmaint) @VERSION@"
}

parse_options() {
	_opts=$(getopt -a -n "$ARGV0" -l "$LOPTS" -o "$SOPTS" -- "$@") || fatal '' y
	eval set -- "$_opts"; unset _opts
	while true; do
		case $1 in
		-u| --unique) SHOW_UNIQ_CMD=show_uniq ;;
		-v|--version) print_version  ; exit 0 ;;
		-h|   --help) print_help     ; exit 0 ;;
		          --) shift          ; break  ;;
		esac
		shift
	done

	SHOW_UNIQ_CMD=${SHOW_UNIQ_CMD:-cat}
	PKGNAME=$*

	# Intentional word splitting.
	# shellcheck disable=SC2086
	set -- $PKGNAME

	case $# in
	1) ;; # Fine, one argument is required.
	0) fatal "missing argument" y   ;;
	*) fatal "too many arguments" y ;;
	esac
}

main() {
	parse_options "$@"

	if ! pkgman isinst "$PKGNAME" >/dev/null 2>&1; then
		fatal "package '$PKGNAME' is not installed" n
	fi

	findredundantdeps "$PKGNAME" | $SHOW_UNIQ_CMD
}

######################################################################

# -e: Exit if command return status greater than 0
# -f: Disable globbing *?[]
set -ef

# Globals.
export LC_ALL=POSIX
readonly ARGV0="${0##*/}"
readonly LOPTS="unique,version,help"
readonly SOPTS="uvh"

######################################################################

main "$@"

# vim: cc=72 tw=70
# End of file.
